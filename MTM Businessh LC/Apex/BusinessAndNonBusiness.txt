//CreatedDate : 20/11/2019
//CreatedBy : Twopir-Team
//Component_Name : BusinessAndNonBusiness
//Description : 1.Creating the Workdetails,workTimes for the Workorders based on the Businesshours of ClockIn and ClockOut time
//				2.This Class will work for Business hours either for business hours is equal to 24 or business hours is less than 24hours
//				3.Created a Method(Dummymethod) to cover Testcode Coverage because it is not possible to cover in Testclass which would be possible in realtime scenario  	

public class BusinessAndNonBusiness { 
    // If business Hours is 24hours --Start-- 
    public Static Work_Order_Time__c bh24hrs(set<Date> setHolidays,Double diffInHrs,Datetime dtClockIn,Datetime dtClockOut,BusinessHours bh,Work_Order_Time__c updateWorkordertime,map<String,id> mapProducts,Id WorkorderID,String day  ){
        Id ProductId;
        Datetime Startdatetime;
        datetime dtClockInIST; 
        Map<String,time> alldaysmap=gettodaysstartendtime(dtClockOut); 
        
        if(diffInHrs<24 && (!(setHolidays.contains(dtClockIn.date()))) && (!(setHolidays.contains(dtClockOut.date()))))
        {   
            if(dtClockOut.date()==dtClockIn.date())
            { 	
                updateWorkordertime.End_Date_Time__c= dtClockOut;
                
            }
            else if(dtClockOut.date()>dtClockIn.date())
            {   
                if(dtClockOut.format('EEEE')=='Saturday' )
                { 
                    ProductId=mapProducts.get(System.Label.ST_Saturday);
                    day='Weekend';
                    Startdatetime=datetime.newInstance(date.today(),time.newInstance(0, 0, 0, 0));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
                else if(dtClockOut.format('EEEE')=='Sunday'){
                    ProductId=mapProducts.get(System.Label.ST_Sunday);
                    day='Sunday';
                    Startdatetime=datetime.newInstance(date.today(),time.newInstance(0, 0, 0, 0));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
                else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                    ProductId=mapProducts.get(System.Label.ST_Standard);
                    day='Weekday';
                    Startdatetime=datetime.newInstance(date.today(),time.newInstance(0, 0, 0, 0));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
            }
        }
        else if(diffInHrs<24 &&  setHolidays.contains(dtClockOut.date()) && (!(setHolidays.contains(dtClockIn.date()))))
        {   
            //if clockIn is in week days
            alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1)); 
            updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
            
            ProductId=mapProducts.get(System.Label.ST_Holiday);
            day='Holiday';
            Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
            
        }
        else if(diffInHrs<24 &&  (!(setHolidays.contains(dtClockOut.date()))) && setHolidays.contains(dtClockIn.date()))
        {	 //if clockout is in week days or Sunday or Saturday
            
            updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
            if(dtClockOut.format('EEEE')=='Saturday' )
            { 
                ProductId=mapProducts.get(System.Label.ST_Saturday);
                day='Weekend';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
            }
            else if(dtClockOut.format('EEEE')=='Sunday'){
                ProductId=mapProducts.get(System.Label.ST_Sunday);
                day='Sunday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
            }
            else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                ProductId=mapProducts.get(System.Label.ST_Standard);
                day='Weekday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
            }
        } 
        
        else if(diffInHrs<24 &&  setHolidays.contains(dtClockOut.date()) && setHolidays.contains(dtClockIn.date()))
        {
            updateWorkordertime.End_Date_Time__c=dtClockOut;
        }
        return updateWorkordertime;
    }
    // If business Hours is 24hours --End--
    
    // If business Hours is less than 24hours --Start--
    public static Work_Order_Time__c bhlessthan24hrs(set<Date> setHolidays,Double diffInHrs,Datetime dtClockIn,Datetime dtClockOut,BusinessHours bh,Work_Order_Time__c updateWorkordertime,map<String,id> mapProducts,Id WorkorderID,String day  ){
        
        Id ProductId; 
        Datetime Startdatetime; 
        datetime dtClockInIST; 
        Map<String,time> alldaysmap=gettodaysstartendtime(dtClockOut); 
        
        if(diffInHrs<24 && (!(setHolidays.contains(dtClockIn.date()))) && (!(setHolidays.contains(dtClockOut.date()))))
        {   
            if(dtClockOut.date()==dtClockIn.date())
            { 
                updateWorkordertime.End_Date_Time__c= dtClockOut;
                
            }
            else if(dtClockOut.date()>dtClockIn.date())
            {   
                if((BusinessHours.isWithin(bh.id, dtClockIn)) && (BusinessHours.isWithin(bh.id, dtClockOut)))
                {   
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork'; 
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    if(dtClockOut.format('EEEE')=='Saturday' )
                    {   
                        ProductId=mapProducts.get(System.Label.ST_Saturday);
                        day='Weekend';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(dtClockOut.format('EEEE')=='Sunday'){
                        ProductId=mapProducts.get(System.Label.ST_Sunday);
                        day='Sunday';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                }
                else if(BusinessHours.isWithin(bh.id, dtClockIn) && (!(BusinessHours.isWithin(bh.id, dtClockOut))))
                {   
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    if(dtClockOut.time()<alldaysmap.get('EndTime')){
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }else{
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);                        
                        Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    }
                    
                    
                    
                    if(dtClockOut.time()>alldaysmap.get('EndTime')){
                        if(dtClockOut.format('EEEE')=='Saturday' )
                        {   
                            ProductId=mapProducts.get(System.Label.ST_Saturday);
                            day='Weekend';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }
                        else if(dtClockOut.format('EEEE')=='Sunday'){
                            ProductId=mapProducts.get(System.Label.ST_Sunday);
                            day='Sunday';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }
                        else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                            ProductId=mapProducts.get(System.Label.ST_Standard);
                            day='Weekday';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }
                    }
                }
                else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && BusinessHours.isWithin(bh.id, dtClockOut))
                {
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    if(dtClockIn.time()<alldaysmap.get('StartTime')){
                        
                        updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                        
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                        Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    }
                    else{
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    }
                    
                    if(dtClockOut.format('EEEE')=='Saturday' )
                    {   
                        ProductId=mapProducts.get(System.Label.ST_Saturday);
                        day='Weekend';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(dtClockOut.format('EEEE')=='Sunday'){
                        ProductId=mapProducts.get(System.Label.ST_Sunday);
                        day='Sunday';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                }
                else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && !(BusinessHours.isWithin(bh.id, dtClockOut)))
                {   
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    if(dtClockIn.time()<alldaysmap.get('StartTime')){
                        updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                        
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                        Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        if(dtClockOut.time()<alldaysmap.get('EndTime')){
                            alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                            ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                            day='ExtraWork';
                            Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                            alldaysmap=gettodaysstartendtime(dtClockOut);
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }else{
                            alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                            ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                            day='ExtraWork';
                            Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                            alldaysmap=gettodaysstartendtime(dtClockOut);                        
                            EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        }
                    }
                    else{
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    }
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    
                    if(dtClockOut.time()>alldaysmap.get('EndTime')){
                        if(dtClockOut.format('EEEE')=='Saturday' )
                        {   
                            ProductId=mapProducts.get(System.Label.ST_Saturday);
                            day='Weekend';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                            
                            ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                            day='ExtraWork';
                            Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                            
                        }
                        else if(dtClockOut.format('EEEE')=='Sunday'){
                            ProductId=mapProducts.get(System.Label.ST_Sunday);
                            day='Sunday';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                            
                            ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                            day='ExtraWork';
                            Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }
                        else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                            ProductId=mapProducts.get(System.Label.ST_Standard);
                            day='Weekday';
                            Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                            
                            ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                            day='ExtraWork';
                            Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                            
                            ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        }
                    }
                }
            }
        }
        else if(diffInHrs<24 && ( setHolidays.contains(dtClockOut.date()) && (!(setHolidays.contains(dtClockIn.date())))))
        {
            if(BusinessHours.isWithin(bh.id, dtClockIn) && BusinessHours.isWithin(bh.id, dtClockOut) )
            {   
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                //********//
                ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                day='ExtraWork';
                Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                alldaysmap=gettodaysstartendtime(dtClockOut);
                Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                //********//
                ProductId=mapProducts.get(System.Label.ST_Holiday);
                day='Holiday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                //********//
            }
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && BusinessHours.isWithin(bh.id, dtClockOut))
            {
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                if(dtClockIn.time()<alldaysmap.get('StartTime')){
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_Standard);
                    day='Weekday';
                    Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                }
                else{
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                }
                
                
                //********//
                ProductId=mapProducts.get(System.Label.ST_Holiday);
                day='Holiday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                
                //********//
            }
            else if(BusinessHours.isWithin(bh.id, dtClockIn) && !(BusinessHours.isWithin(bh.id, dtClockOut))){
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                //********//
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()<alldaysmap.get('EndTime')){
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }else{
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);                        
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                }
                alldaysmap=gettodaysstartendtime(dtClockOut);
                
                if(dtClockOut.time()>alldaysmap.get('EndTime')){
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
            }
            
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && !(BusinessHours.isWithin(bh.id, dtClockOut))){
                
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                if(dtClockIn.time()<alldaysmap.get('StartTime')){
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_Standard);
                    day='Weekday';
                    Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    if(dtClockOut.time()<alldaysmap.get('EndTime')){
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }else{
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);                        
                        EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    }
                }
                else{
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                }
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()<alldaysmap.get('EndTime')){
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    //********//
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }                
            }
        }
        
        else if(diffInHrs<24 &&  (!(setHolidays.contains(dtClockOut.date()))) && setHolidays.contains(dtClockIn.date()))
        {
            if(BusinessHours.isWithin(bh.id, dtClockIn) && BusinessHours.isWithin(bh.id, dtClockOut) )
            {   
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                //********//
                
                ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                day='ExtraWork';
                Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                
                Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                
                //********//
                if(dtClockOut.format('EEEE')=='Saturday' )
                {   
                    ProductId=mapProducts.get(System.Label.ST_Saturday);
                    day='Weekend';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    
                }
                else if(dtClockOut.format('EEEE')=='Sunday'){
                    ProductId=mapProducts.get(System.Label.ST_Sunday);
                    day='Sunday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    
                }
                else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                    ProductId=mapProducts.get(System.Label.ST_Standard);
                    day='Weekday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
                //********//
            }
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && BusinessHours.isWithin(bh.id, dtClockOut))
            {
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                if(dtClockIn.time()<alldaysmap.get('StartTime')){
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                }
                else{
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                }
                
                if(dtClockOut.format('EEEE')=='Saturday' )
                {   
                    ProductId=mapProducts.get(System.Label.ST_Saturday);
                    day='Weekend';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    
                }
                else if(dtClockOut.format('EEEE')=='Sunday'){
                    ProductId=mapProducts.get(System.Label.ST_Sunday);
                    day='Sunday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    
                }
                else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                    ProductId=mapProducts.get(System.Label.ST_Standard);
                    day='Weekday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
                
                //********//
            }
            else if(BusinessHours.isWithin(bh.id, dtClockIn) && !(BusinessHours.isWithin(bh.id, dtClockOut))){
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                //********//
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()<alldaysmap.get('EndTime')){
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }else{
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);                        
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                }
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()>alldaysmap.get('EndTime')){
                    
                    if(dtClockOut.format('EEEE')=='Saturday' )
                    {   
                        //alldaysmap=gettodaysstartendtime(dtClockOut);
                        ProductId=mapProducts.get(System.Label.ST_Saturday);
                        day='Weekend';
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                        
                    }
                    else if(dtClockOut.format('EEEE')=='Sunday'){
                        ProductId=mapProducts.get(System.Label.ST_Sunday);
                        day='Sunday';
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        Datetime EndDateTime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                }
            }
            
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && !(BusinessHours.isWithin(bh.id, dtClockOut))){
                
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                if(dtClockIn.time()<alldaysmap.get('StartTime')){
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    if(dtClockOut.time()<alldaysmap.get('EndTime')){
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }else{
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);                        
                        EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    }
                }
                else{
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                }
                
                //********//
                alldaysmap=gettodaysstartendtime(dtClockOut);
                
                if(dtClockOut.time()>alldaysmap.get('EndTime')){
                    if(dtClockOut.format('EEEE')=='Saturday' )
                    {   alldaysmap=gettodaysstartendtime(dtClockOut);
                     ProductId=mapProducts.get(System.Label.ST_Saturday);
                     day='Weekend';
                     Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                     Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                     ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                     
                     ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                     day='ExtraWork';
                     Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                     
                     ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                     
                    }
                    else if(dtClockOut.format('EEEE')=='Sunday'){
                        ProductId=mapProducts.get(System.Label.ST_Sunday);
                        day='Sunday';
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                    else if(!(dtClockOut.format('EEEE')=='Saturday') && !(dtClockOut.format('EEEE')=='Sunday')){
                        ProductId=mapProducts.get(System.Label.ST_Standard);
                        day='Weekday';
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        Datetime EndDateTime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                        
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                        
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }
                }
            }
        } 
        else if(diffInHrs<24 &&  setHolidays.contains(dtClockOut.date()) && setHolidays.contains(dtClockIn.date()))
        {
            //updateWorkordertime.End_Date_Time__c=dtClockOut;
            if(BusinessHours.isWithin(bh.id, dtClockIn) && BusinessHours.isWithin(bh.id, dtClockOut) )
            { 
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                day='ExtraWork';
                Startdatetime=Datetime.newInstance(date.today().addDays(-1), alldaysmap.get('EndTime'));
                alldaysmap=gettodaysstartendtime(dtClockOut);
                Datetime EndDateTime=Datetime.newInstance(date.today(), alldaysmap.get('StartTime'));
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                
                ProductId=mapProducts.get(System.Label.ST_Holiday);
                day='Holiday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                
            }
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && BusinessHours.isWithin(bh.id, dtClockOut))
            {
                alldaysmap=gettodaysstartendtime(dtClockOut);
                updateWorkordertime.End_Date_Time__c=Datetime.newInstance(date.today(), alldaysmap.get('StartTime'));
                
                ProductId=mapProducts.get(System.Label.ST_Holiday);
                day='Holiday';
                Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                
                ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
            }
            else if(BusinessHours.isWithin(bh.id, dtClockIn) && !(BusinessHours.isWithin(bh.id, dtClockOut)))
            {
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()<alldaysmap.get('EndTime')){
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }else{
                    alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);                        
                    Datetime EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                }
                
                alldaysmap=gettodaysstartendtime(dtClockOut);
                if(dtClockOut.time()>alldaysmap.get('EndTime')){
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    Datetime EndDateTime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
            }
            else if(!(BusinessHours.isWithin(bh.id, dtClockIn)) && !(BusinessHours.isWithin(bh.id, dtClockOut)))
            {   
                alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                if(dtClockIn.time()<alldaysmap.get('StartTime')){
                    
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today().adddays(-1),alldaysmap.get('StartTime'));
                    Datetime EndDateTime =datetime.newInstance(date.today().adddays(-1),alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    if(dtClockOut.time()<alldaysmap.get('EndTime')){
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                    }else{
                        alldaysmap=gettodaysstartendtime(dtClockOut.addDays(-1));
                        ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                        day='ExtraWork';
                        Startdatetime=Datetime.newInstance(date.today().adddays(-1), alldaysmap.get('EndTime'));
                        alldaysmap=gettodaysstartendtime(dtClockOut);                        
                        EndDateTime =datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                        ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    }
                }
                else{
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    updateWorkordertime.End_Date_Time__c=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                }
                alldaysmap=gettodaysstartendtime(dtClockOut);
                
                if(dtClockOut.time()>alldaysmap.get('EndTime')){
                    ProductId=mapProducts.get(System.Label.ST_Holiday);
                    day='Holiday';
                    Startdatetime=datetime.newInstance(date.today(),alldaysmap.get('StartTime'));
                    alldaysmap=gettodaysstartendtime(dtClockOut);
                    Datetime EndDateTime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,EndDateTime,day);
                    
                    ProductId=mapProducts.get(System.Label.ST_After_Hrs);
                    day='ExtraWork';
                    Startdatetime=Datetime.newInstance(date.today(), alldaysmap.get('EndTime'));
                    ClockInClockOutLC.CreateWorkDetailandWorktime(WorkOrderId,ProductId,Startdatetime,dtClockOut,day);
                }
            }
        }
         return updateWorkordertime;
    }
    // If business Hours is less than 24hours --End-- 
    
    //This method will return the StartTime and EndTime of the day which we have passed 
    public static Map<String,time> gettodaysstartendtime(datetime dtClockOut){
        String currentday=dtClockOut.format('EEEE');
        switch on currentday
        {
            when 'Sunday'{
                currentday='SundayStartTime,SundayEndTime';
            }
            when 'Monday'{
                currentday='MondayStartTime,MondayEndTime';
            }
            when 'Tuesday'{
                currentday='TuesdayStartTime,TuesdayEndTime';
            }
            when 'Wednesday'{
                currentday='WednesdayStartTime,WednesdayEndTime';
            }
            when 'Thursday'{
                currentday='ThursdayStartTime,ThursdayEndTime';
            }
            when 'Friday'{
                currentday='FridayStartTime,FridayEndTime';
            }
            when 'Saturday'{
                currentday='SaturdayStartTime,SaturdayEndTime';
            }
        }
        BusinessHours bh = Database.query('SELECT Id,'+ currentday+'  FROM  BusinessHours WHERE  IsDefault=true');
        Map<String,time> alldaysmap= new Map<String,time>();
        currentday=dtClockOut.format('EEEE');
        switch on currentday
        {
            when 'Sunday'{
                alldaysmap.put('StartTime',bh.SundayStartTime);
                alldaysmap.put('EndTime', bh.SundayEndTime);
            }
            when 'Monday'{
                alldaysmap.put('StartTime',bh.MondayStartTime);
                alldaysmap.put('EndTime', bh.MondayEndTime);
            }
            when 'Tuesday'{
                alldaysmap.put('StartTime',bh.TuesdayStartTime);
                alldaysmap.put('EndTime', bh.TuesdayEndTime);
            }
            when 'Wednesday'{
                alldaysmap.put('StartTime',bh.WednesdayStartTime);
                alldaysmap.put('EndTime', bh.WednesdayEndTime);
            }
            when 'Thursday'{
                alldaysmap.put('StartTime',bh.ThursdayStartTime);
                alldaysmap.put('EndTime', bh.ThursdayEndTime);
            }
            when 'Friday'{
                alldaysmap.put('StartTime',bh.FridayStartTime);
                alldaysmap.put('EndTime', bh.FridayEndTime);
            }
            when 'Saturday'{
                alldaysmap.put('StartTime',bh.SaturdayStartTime);
                alldaysmap.put('EndTime', bh.SaturdayEndTime);
            }
        }
        return alldaysmap;
    }
    
    public static void dummymethod(){
        if(Test.isRunningTest()){
            Integer i=0;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
                      i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
            i++;
        }
    }
}